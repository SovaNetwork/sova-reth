# This workflow is modified from Lighthouse and Reth:
# https://github.com/sigp/lighthouse/blob/441fc1691b69f9edc4bbdc6665f3efab16265c9b/.github/workflows/release.yml
# https://github.com/paradigmxyz/reth/blob/1e965caf5fa176f244a31c0d2662ba1b590938db/.github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REPO_NAME: ${{ github.repository }}
  IMAGE_NAME: ${{ github.repository_owner }}/sova-reth

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
        id: extract_version
    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}

  build:
    name: Build Release
    strategy:
      matrix:
        configs:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            profile: release
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            profile: release
          - target: x86_64-apple-darwin
            os: macos-latest
            profile: release
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            profile: release

    runs-on: ${{ matrix.configs.os }}
    needs: extract-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.configs.target }}

      - uses: rui314/setup-mold@v1
        if: matrix.configs.os == 'ubuntu-latest'

      - uses: taiki-e/install-action@cross
        if: matrix.configs.target == 'aarch64-unknown-linux-gnu' || matrix.configs.target == 'x86_64-pc-windows-gnu'

      - name: Install Dependencies for Windows
        if: matrix.configs.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64 protobuf-compiler

      - name: Install Protobuf Compiler for Linux
        if: matrix.configs.target == 'x86_64-unknown-linux-gnu' || matrix.configs.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install Protobuf Compiler for macOS
        if: matrix.configs.target == 'x86_64-apple-darwin'
        run: brew update && brew install protobuf

      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build Cross-Platform
        if: matrix.configs.target == 'aarch64-unknown-linux-gnu' || matrix.configs.target == 'x86_64-pc-windows-gnu'
        run: |
          cross build --release --target ${{ matrix.configs.target }}

      - name: Build Native
        if: matrix.configs.target == 'x86_64-unknown-linux-gnu' || matrix.configs.target == 'x86_64-apple-darwin'
        run: |
          cargo build --release --target ${{ matrix.configs.target }}

      - name: Prepare artifacts directory
        run: mkdir artifacts

      - name: Move binary (Unix)
        if: matrix.configs.target != 'x86_64-pc-windows-gnu'
        run: |
          mv target/${{ matrix.configs.target }}/release/sova-reth ./artifacts/

      - name: Move binary (Windows)
        if: matrix.configs.target == 'x86_64-pc-windows-gnu'
        run: |
          mv target/${{ matrix.configs.target }}/release/sova-reth.exe ./artifacts/

      - name: Configure GPG and create artifacts
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --batch --import
          cd artifacts
          if [[ "${{ matrix.configs.target }}" == *windows* ]]; then
            tar -czf sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz sova-reth.exe
          else
            tar -czf sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz sova-reth
          fi
          echo "$GPG_PASSPHRASE" | gpg --passphrase-fd 0 --pinentry-mode loopback --batch -ab sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          mv *tar.gz* ..
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz
          path: sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz

      - name: Upload signature
        uses: actions/upload-artifact@v4
        with:
          name: sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc
          path: sova-reth-${{ needs.extract-version.outputs.VERSION }}-${{ matrix.configs.target }}.tar.gz.asc

  draft-release:
    name: Draft Release
    needs: [build, extract-version]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.extract-version.outputs.VERSION }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 ${{ env.VERSION }}^)..${{ env.VERSION }})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release draft
        env:
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body=$(cat <<- "ENDBODY"
          ## SOVA-RETH Release ${{ env.VERSION }}

          ## Testing Checklist (DELETE ME)
          - [ ] Run on testnet for 1-3 days
          - [ ] Resync a mainnet node
          - [ ] Ensure all CI checks pass

          ## Summary
          Add a summary, including:
          - Critical bug fixes
          - New features
          - Any breaking changes

          ## Update Priority
          | User Class | Priority |
          |------------|----------|
          | Validators | <TODO>   |
          | Non-validators | <TODO> |

          ## All Changes
          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Binaries
          The binaries are signed with PGP.

          | System | Architecture | Binary | PGP Signature |
          |:---:|:---:|:---:|:---|
          | <img src="https://simpleicons.org/icons/linux.svg" style="width: 32px;"/> | x86_64 | [sova-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz.asc) |
          | <img src="https://simpleicons.org/icons/linux.svg" style="width: 32px;"/> | aarch64 | [sova-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-aarch64-unknown-linux-gnu.tar.gz.asc) |
          | <img src="https://simpleicons.org/icons/apple.svg" style="width: 32px;"/> | x86_64 | [sova-reth-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-apple-darwin.tar.gz.asc) |
          | <img src="https://simpleicons.org/icons/windows.svg" style="width: 32px;"/> | x86_64 | [sova-reth-${{ env.VERSION }}-x86_64-pc-windows-gnu.tar.gz](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-pc-windows-gnu.tar.gz) | [PGP Signature](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/sova-reth-${{ env.VERSION }}-x86_64-pc-windows-gnu.tar.gz.asc) |
          ENDBODY
          )
          assets=()
          for asset in ./sova-reth-*.tar.gz*; do
              assets+=("-a" "$asset")
          done
          tag_name="${{ env.VERSION }}"
          echo "$body" | gh release create --draft -t "SOVA-RETH $tag_name" -F "-" "$tag_name" "${assets[@]}"